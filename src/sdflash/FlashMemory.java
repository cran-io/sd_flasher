/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sdflash;

import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.json.JSONException;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.ParseException;


/**
 *
 * @author agustinquintanamurta
 */
public class FlashMemory extends javax.swing.JFrame {

    /**
     * Creates new form FlashMemory
     */
    
    Login login;
    static List<Package> packages = new ArrayList<Package>();
    Supplier supplier;
    String server = "104.236.88.136:3000";
    
    public FlashMemory(Supplier supp, List<Package> packagesListSent) {
        initComponents();
        this.supplier = supp;
        this.packages = packagesListSent;
        setIcon();
        this.setLocationRelativeTo(null);
        
        File[] paths;
        FileSystemView fsv = FileSystemView.getFileSystemView();
        
        paths = File.listRoots();
        
        for(File path:paths)
        {
//            jComboBox1.addItem(("Drive Name: "+path+"       Description: "+fsv.getSystemTypeDescription(path)));
            jComboBox1.addItem(path);
        }
        
    }

    FlashMemory(Login login) {
        initComponents();
        setIcon();
        this.login = login;
        this.setLocationRelativeTo(null);
        
        File[] paths;
        FileSystemView fsv = FileSystemView.getFileSystemView();
        
        paths = File.listRoots();
        
        for(File path:paths)
        {
            jComboBox1.addItem((path));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel1.setText("Select the driver to flash:");

        jButton1.setText("<<Flash>>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<<Recargar USB>>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String pathOfCopy = System.getProperty("user.dir") + File.separator + "FolderToCopy";
        String sn = jComboBox1.getSelectedItem().toString();
        String pathOfDestination = sn + "games";
        File fileToCopy= new File(pathOfCopy);
        File to = new File(pathOfDestination);
        if (!to.exists()){
            new File(pathOfDestination).mkdir();
        }
        try {
            FileUtils.copyDirectory(fileToCopy, to);
            FileUtils.deleteDirectory(fileToCopy);
        } catch (IOException ex) {
            Logger.getLogger(FlashMemory.class.getName()).log(Level.SEVERE, null, ex);
        }    
        this.setVisible(false);
        Flasher flash;
        
        try {
            String apiToken = supplier.getApiToken();
            InputStream in = new URL("http://"+server+"//api//v1//profile//?api_token=" + supplier.getApiToken()).openStream();
            String text = IOUtils.toString( in ) ;
            IOUtils.closeQuietly(in);
            String genreJson = text;
            JSONObject genreJsonObject = (JSONObject) JSONValue.parseWithException(genreJson);
            String name = genreJsonObject.get("name").toString();
            int id = Integer.parseInt(genreJsonObject.get("id").toString());
            int wallet = Integer.parseInt(genreJsonObject.get("credit").toString());
            supplier = new Supplier(id, name, wallet, apiToken);
        } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(null, "Tu contrase√±a ya no es valida o es incorrecta.", "Error",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Los servidores estan siendo actualizados. Reintentar mas tarde.", "Error",JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {                    
            flash = new Flasher(supplier, packages);
            flash.show();
        } catch (JSONException ex) {
            Logger.getLogger(Flasher.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        File[] paths;
        FileSystemView fsv = FileSystemView.getFileSystemView();
        
        paths = File.listRoots();
        
        for(File path:paths)
        {
            jComboBox1.addItem(("Drive Name: "+path+"       Description: "+fsv.getSystemTypeDescription(path)));
//            jComboBox1.addItem(path);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
    }
}    

